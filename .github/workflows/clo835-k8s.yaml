#CLO835-Assignment2-senindumendis

name: K8s Cluster deployment by Senindu Mendis
on: 
  push:
    branches: [ master ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest
   
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build and push app tier image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_APP: clo835-app
        ECR_REPOSITORY_DB: clo835-db
        IMAGE_TAG: latest
      run: |
        ls -al
        # Docker build Mysql
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG -f db/Dockerfile .
        # Push Mysql to AWS ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG

         # Docker build Python App
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG .
        # Push Python App to AWS ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG

  deploy:
    name: Deploy to K8s Cluster
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      INSTANCE_ID: ${{ secrets.INSTANCE_ID }}  # Replace with your EC2 instance ID
    needs: build
    strategy:
      fail-fast: true  # Cancels workflow if a step fails
    steps:  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger deployment script in EC2 using SSM
        run: |
          set -e
          INSTANCE_ID="${{ env.INSTANCE_ID }}"
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Triggering deployment from GitHub Actions" \
            --parameters 'commands=["sudo -u ec2-user bash -c \"chmod +x /home/ec2-user/deploy.sh && /home/ec2-user/deploy.sh \""]' \
            --output text